import org.ajoberstar.grgit.*

buildscript {
    repositories {
        maven {
            url 'https://nexus.intr/repository/mavengroup'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 5, 'minutes'
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.9"
        classpath("ru.majordomo.gradle.plugins:copycompose:1.+")
        classpath("ru.majordomo.hms.rc.staff:resources:1+")
        classpath("org.ajoberstar:gradle-git:1.6.0")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.2"
    id "com.gorylenko.gradle-git-properties" version "1.5.1"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'ru.majordomo.gradle.plugins.copycompose'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'

def versionPropsFile = file('version.properties')
def versionBuild

if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionBuild = versionProps['VERSION_BUILD'].toInteger()
} else {
    throw new GradleException("Could not read version.properties!")
}

ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'ru.majordomo.hms.rc.staff'
            artifactId 'resources'
            version '1.1.' + versionBuild
            artifact resourceJar
        }
    }
    repositories {
        maven {
            url uri(mavenUrl)
            credentials {
                username = mavenUser
                password = mavenPass
            }
        }
    }
}

version = '0.0.1-SNAPSHOT'

jar {
    baseName = 'rc-staff'
    version = version
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

springBoot {
    buildInfo()
}

task resourceJar(type: Jar, dependsOn: compileJava) {
    baseName = 'resources'
    from sourceSets.main.output.classesDir
    include 'ru/majordomo/hms/rc/staff/resources/*'
}

repositories {
    maven {
        url 'https://nexus.intr/repository/mavengroup'
    }
}

dependencies {
    compile('ru.majordomo.hms.rc.staff:resources:1+')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('commons-net:commons-net:3.5')
    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    compile(group: 'com.mysql', name: 'management', version: '1.1.6') {
        exclude(module: 'jmxtools')
    }
    testCompile('com.github.fakemongo:fongo:2.2.0-RC2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springVersion}"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

clean.doFirst {
    delete "${rootDir}/docker-compose"
    delete "${rootDir}/docker-compose.yml"
}

build.dependsOn("resourceJar")
publish.doFirst autoIncrementBuildNumber
apply from: "https://nexus.intr/repository/init/gradle-init/0.1/dockertask.gradle"
